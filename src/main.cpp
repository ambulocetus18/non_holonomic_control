/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       C:\Users\13918                                            */
/*    Created:      Mon Sep 06 2021                                           */
/*    Description:  V5 project                                                */
/*                                                                            */
/*----------------------------------------------------------------------------*/

// ---- START VEXCODE CONFIGURED DEVICES ----
// Robot Configuration:
// [Name]               [Type]        [Port(s)]
// Controller1          controller                    
// inertial20           inertial      11              
// encoderRight         encoder       A, B            
// leftFront            motor         1               
// leftBack             motor         2               
// rightFront           motor         3               
// rightBack            motor         4               
// encoderMiddle        rotation      5               
// ---- END VEXCODE CONFIGURED DEVICES ----

#include "vex.h"
#include "iostream"
#include "vector"
#include "motion.h"
#include "odom.h"
#include "screen_print.h"

using namespace vex;

int main() {
  // Initializing Robot Configuration. DO NOT REMOVE!
  vexcodeInit();

  // wait (2500, msec);

  inertial20.calibrate();
  while(inertial20.isCalibrating()){
    task::sleep(100);
  }

  inertial20.setHeading(270, deg);
  inertial20.setRotation(0, deg);

  thread odom = thread(position_update);

  // screen graphing initialization
  draw_background();

  // moveToRefPose (double targetX, double targetY, double targetHeading, double linMax, double turnMax, double Kp_lin, double Kp_turn, double Kp_predict, double r)
  // moveToRefPose (0.5, 3, 90, 100, 100, 70, 1.6, 8, 0.5);
  std::vector<std::vector<double>> path 
  {
    {1, 1},
    {1, 2},
    {1, 3},
    {1, 4},
    {3, 4},
    {3, 3},
    {3, 2},
    {3, 1},
    {1, 1},
    // { 1.995364188693422 , 0.9260878863373272 }, 
    // { 1.765856066102214 , 0.958581493469925 }, 
    // { 1.5521952252345994 , 1.0467924305536855 }, 
    // { 1.3717175298425839 , 1.179879642985652 }, 
    // { 1.2413352347950946 , 1.3451430680290832 }, 
    // { 1.1735382689239124 , 1.5313547241108882 }, 
    // { 1.1723469278266516 , 1.7302315908197947 }, 
    // { 1.232191687874095 , 1.9363687806936234 }, 
    // { 1.340630437059832 , 2.146505925865913 }, 
    // { 1.4829988624326973 , 2.3587671219677175 }, 
    // { 1.6462857580790333 , 2.572106863494598 }, 
    // { 1.8208273631582894 , 2.785956173054254 },
    // { 2.0 , 3.0 }, 
    // { 2.181400740039703 , 3.214141682691549 }, 
    // { 2.358211761587227 , 3.4281205254049834 }, 
    // { 2.5238069450460086 , 3.6416763604316826 }, 
    // { 2.6677297520975753 , 3.8543156861297123 }, 
    // { 2.775775052381248 , 4.065112637903678 }, 
    // { 2.8325818063240185 , 4.272342041669508 }, 
    // { 2.826368442392691 , 4.472808609996242 }, 
    // { 2.7534527532787436 , 4.660847154051528 }, 
    // { 2.61968728248025 , 4.827397286191399 }, 
    // { 2.438067804818647 , 4.96014316945879 }, 
    // { 2.2246114564164117 , 5.045737440316502 }, 
    // { 1.9953641880423911 , 5.073912113640027 }, 
    // { 1.7658560661131857 , 5.041418506519834 }, 
    // { 1.552195226277158 , 4.953207569410452 }, 
    // { 1.371717536368261 , 4.820120356802553 }, 
    // { 1.2413352713644112 , 4.65485693078292 }, 
    // { 1.1735384573015015 , 4.468645269744111 }, 
    // { 1.1723478184745932 , 4.269768379955306 }, 
    // { 1.232195542050472 , 4.063631091777355 }, 
    // { 1.3406456535409736 , 3.8534935645259214 }, 
    // { 1.4830534744470862 , 3.641231016312036 }, 
    // { 1.6464632187851336 , 3.4278869245834653 }, 
    // { 1.8213471336993767 , 3.2140248891262413 }, 
    // { 2.0013654604852915 , 2.9999471120460117 }, 
    // { 2.18195899715495 , 2.785837761785476 }, 
    // { 2.3584235183706586 , 2.571871945680942 }, 
    // { 2.523881980617055 , 2.358321036595858 }, 
    // { 2.667754739297414 , 2.1456834622260783 }, 
    // { 2.7757829129562603 , 1.9348870976098522 }, 
    // { 2.8325841530624625 , 1.7276578801207854 }, 
    // { 2.8263691099667465 , 1.5271913679156404 }, 
    // { 2.753452934875415 , 1.3391528399731552 }, 
    // { 2.6196873298680767 , 1.1726027122560436 }, 
    // { 2.4380678167144403 , 1.0398568301527724 }, 
    // { 2.224611459293641 , 0.9542625595896111 }, 
    // { 1.995364188693422 , 0.9260878863373272 },
    // { 1.765856066102214 , 0.958581493469925 }, 
  };

  draw_path (path);

  // void followRefPath (const std::vector<std::vector<double>> &path, double targetAngle, double maxTotalVel, double linMax, double turnMax, double Kp_lin, double Kp_turn, double tune_turn, int numOfSeg)
  followRefPath (path, 180, 100, 100, 100, 75, 1.5, 1.2, 0);
  draw_path (path);

  while (1)
  {
    wait (10, msec);
  }
  
}
